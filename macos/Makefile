all:

# Byte-compile Emacs Lisp files
elc: ~/.files/.emacs.d
	emacs -q --batch --eval '(byte-recompile-directory "$^")'


# Restore the pre-25.1 Emacs icon with the prettier traditional one
emacs-icon: $(wildcard .emacs.d/*.icns)
	@cp -f $^ /Applications/Emacs.app/Contents/Resources/
	@echo "Emacs icon updated. Restart system to force display in Finder/Spotlight.";


# Compile a cutting-edge build of V8
v8:
	@cd /Users/johngardner/Mirrors/v8;\
	git pull;\
	tools/dev/v8gen.py x64.release;\
	ninja -C out.gn/x64.release;\
	tools/run-tests.py --gn;\
	path=/usr/local/bin/v8;\
	[ -L $$path ] || ln -fs "$$path";\
	$$path --help


# Update lists of installed packages
lists: etc/install/package-lists.sh
	@ echo '# Auto-generated by `make lists`' > $^;
	@ $(call update-list,npm_modules,"ls /usr/local/lib/node_modules | sed -Ee '/npm|uglifyjs/d'")
	@ $(call update-list,ruby_gems,"gem list --no-versions | grep -v '* LOCAL GEMS *'")
	@ $(call update-list,pip_packages,"pip2 list --format=legacy | cut -d ' ' -f1")
	@ $(call update-list,cpan_modules,"etc/install/cpanlist.pl")
	@ cd etc/install && brew bundle dump --force;
update-list = \
	printf '\n%s"\n' "$(1)=" >> $^; \
	eval $(2) | sort -fi | sed -Ee 's/^/\t/g' >> $^; \
	printf '";\n' >> $^;
.PHONY: lists



# Keep fonts up-to-date with latest upstream changes
find-types = $(foreach ext,$(1),$(wildcard $(2)/*.$(ext)))
font-repos = $(addprefix ~/Mirrors/Google-,Fonts Noto NotoEmoji) ~/Mirrors/URW-Core35-Fonts
font-sources = $(shell find ~/Mirrors/Google-Fonts/{apache,ofl,ufl} -type f -name *.ttf ! \( \
		-name Noto* -or \
		-ipath '*/alefhebrew/*' -or \
		-ipath '*/misssaintde*' -or \
		-ipath '*/mrbedford/*' -or \
		-ipath '*/siamreap/*' -or \
		-ipath '*/terminaldosis*' \)) \
	$(call find-types,ttf ttc otf,~/Mirrors/Google-Noto/unhinted) \
	$(call find-types,ttc,~/Mirrors/Google-NotoCJK) \
	$(call find-types,ttf,~/Mirrors/Google-NotoEmoji/fonts) \
	$(call find-types,ttf,~/Mirrors/URW-Core35-Fonts)
$(font-sources):; @ relink $@ ~/Library/Fonts/$(notdir $@)
font-links: $(font-sources)
.PHONY:     $(font-sources)

# Install githooks to relink fonts after pulling updates
font-hooks: $(addsuffix /.git/hooks/post-merge,$(font-repos))
%/.git/hooks/post-merge:
	>  $@ echo "#!/bin/sh"
	>> $@ echo "(cd ~/.files && make font-links)"
	chmod +x $@


# Configure scheduled tasks with launchd(8)
cron = ~/Library/LaunchAgents
jobs = $(notdir $(wildcard etc/launch-agents/*.plist))
$(cron):; @mkdir $@ && chmod 0700 $@
$(cron)/%: etc/launch-agents/%
	@cp -v $^ $@ && chmod 0644 $@
cronjobs: $(cron) $(addprefix $(cron)/,$(jobs))


# Reconnect hard-links after downloading an updated eBook
relink-ebooks:
	books=~/Downloads/exploring-es6.*; \
	dest=~/Documents/eBooks/Exploring\ ES6/; \
	for i in $$books; do [ ! -f "$$i" ] || mv $$i "$$dest" && \
		ln -f "$${dest}"$$(basename "$$i") ~/Dropbox/Backups/; \
	done;
	open /Applications/Dropbox.app
.PHONY: relink-ebooks


# Repair NPM projects eaten by VirtualBox
relink-npm := $(patsubst %,~/Labs/%/.git,GetOptions Print Utils Atom-Mocha Atom-FS)
$(relink-npm):
	@for project in $@; do \
		path=$$(dirname $$project); \
		name=$$(basename $$project); \
		printf "%sRelinking:%s %s\n" $$(tput bold) $$(tput sgr0) "$$name"; \
		rm -rf "$$path" && git clone "git@github.com:Alhadis/$$name.git" "$$path" && cd "$$path"; \
		npm install . && symlink-npm; \
		[ Utils = "$$name" ] && make || :;\
	done
relink-npm: $(relink-npm)


# Compress and backup iTunes library database
itunes := ~/Dropbox/Backups/itunes-backup.zip
$(itunes): ~/Music/iTunes
	@zip -r $@ $^/*.{itl,xml}; \
	open /Applications/Dropbox.app; \
	hdd="/Volumes/Amra Helion"; \
	[ ! -d "$$hdd" ] || cp "$@" "$$hdd/MacBook/";
itunes-backup: $(itunes)


# Run unit tests for Troff-implementation detector
heirloom := $(HEIRLOOM)/nroff
tests: share/man/which.roff
	@ groff     -Tutf8 -mandoc $^ | grep -Eq "^Interpreter: groff$$"    || exit 1
	@ groff  -c -Tutf8 -mandoc $^ | grep -Eq "^Interpreter: groff$$"    || exit 2
	@ mandoc    -Tutf8 -mandoc $^ | grep -Eq "^Interpreter: mandoc$$"   || exit 3
	@ mandoc    -Tutf8    -man $^ | grep -Eq "^Interpreter: mandoc$$"   || exit 4
	@ $(heirloom)  -x1 -mandoc $^ | grep -Eq "^Interpreter: heirloom$$" || exit 5
	@ $(heirloom)  -x0 -mandoc $^ | grep -Eq "^Interpreter: unknown$$"  || exit 6
	@ printf 'âœ“ %s%s%s\n' $$(tput setaf 10) 'All tests passed!' $$(tput sgr0)
.PHONY: tests
