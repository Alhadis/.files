#!/bin/sh

#
# run-tests: Run test-scripts in the current directory
#

have(){
	while [ $# -gt 0 ]; do
		command -v "$1" 2>&1 >/dev/null || return 1
		shift
	done
}

# Nroff without trailing lines
[ -f test.roff ] && have groff && {
	groff -tpUTutf8 $@ < test.roff | sed -e :a -e '/^\n*$/{$d;N;};/\n$/ba'
	exit
}

# TypeScript
have ts-node && {
	[ -f test.ts  ] && { ts-node test.ts  "$@"; exit; }
	[ -f test.tsx ] && { ts-node test.tsx "$@"; exit; }
}

# WebAssembly
have wasmtime && {
	[ -f test.wat  ] && { wasmtime test.wat  "$@"; exit; }
	[ -f test.wast ] && { wasmtime test.wast "$@"; exit; }
}

# PostScript
[ -f test.ps ] && have gs && {
	gs -sDEVICE=txtwrite -sOutputFile=- -q -sBATCH -dNOPAUSE -dNOSAFER -I. test.ps
	exit
}

# PowerShell
[ -f test.ps1 ] && have pwsh && {
	pwsh -File test.ps1 "$@"
	exit
}

# Haskell
[ -f test.hs ] && have ghc runghc && {
	runghc test.hs "$@"
	exit
}

# Various other programming languages
[ -f test.awk ] && { awk -f test.awk;     exit; }
[ -f test.lua ] && { lua ./test.lua "$@"; exit; }
[ -f test.tcl ] && { tclsh test.tcl "$@"; exit; }
[ -f test.sh  ] && {      ./test.sh "$@"; exit; }
[ -f test.pl  ] && { perl ./test.pl "$@"; exit; }
[ -f test.rb  ] && { ruby ./test.rb "$@"; exit; }
[ -f test.js  ] && { node ./test.js "$@"; exit; }

# JavaScript with native module support
[ -f test.mjs ] && have node && {
	node --experimental-modules test.mjs "$@"
	exit
}

# Makefile: "make test" (GNU Make only)
[ -f Makefile ] && grep Makefile -qe ^test: && {
	if have gmake; then
		gmake test
		exit
	elif make --version 2>/dev/null | grep -q GNU; then
		make test
		exit
	fi
}

# Rakefile
[ -f Rakefile ] && have bundle rake && {
	[ -f "$1" ] && case $1 in *.rb) set -- "TEST=$@";; esac
	LANG=en_AU.UTF-8 bundle exec rake test "$@"
	exit
}

# Atom
[ -d spec ] && have atom && {
	atom -t spec;
	exit;
}

# Atom + Mocha
[ -d test ] && [ -d node_modules/atom-mocha ] && have atom mocha && {
	atom -t test;
	exit;
}

# Mocha
[ -d test ] && have mocha && {
	mocha
	exit
}

# C: Compile, run, delete
[ -f test.c ] && {
	cc -o test.c.tmp test.c || exit $?
	./test.c.tmp "$@"
	set -- $?
	rm ./test.c.tmp
	exit $1
}

# V: Compile, run, delete
[ -f test.v ] && have v && {
	v -o test.v.tmp test.v
	./test.v.tmp "$@"
	set -- $?
	rm ./test.v.tmp
	exit $1
}

# Unknown executable assumed to be a test-script
[ -x test ] && [ -f test ] && { ./test "$@"; exit; }

# No tests found; do nothing
true
