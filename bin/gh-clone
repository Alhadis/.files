#!/bin/sh

#
# gh-clone: Clone a GitHub repository using "user/repo" shorthand.
#
usage='gh-clone [-b|--branch name] [-r|--recurse] [-s|--shallow] username/repository'
version='v1.2.0'
branch=
recurse=
shallow=

# Parse command-line switches
while [ -n "$1" ]; do case $1 in

	# Print a usage summary and exit
	-h|--help|-\?)
		printf 'Usage: %s\n' "$usage"
		exit ;;

	# Print a version string and exit
	-v|--version)
		printf '%s\n' "$version"
		exit ;;

	# Shallow-clone a specific branch only (implies `-s')
	-b|--branch)
		shift
		[ ! "$1" ] && {
			>&2 printf 'gh-clone: No branch specified\n'
			>&2 printf 'Usage: %s\n' "$usage"
			exit 1
		}
		branch="--single-branch --branch $1"
		shallow="--depth=1" ;;

	# Checkout repository's submodules if any are used 
	-r|--recurse)
		recurse="--recursive" ;;

	# Shallow-clone the remote's currently-active branch
	-s|--shallow)
		shallow="--depth=1" ;;

	# Double-dash: Terminate option parsing
	--)
		shift
		break ;;

	# Invalid option: abort
	--*|-?*)
		>&2 printf 'gh-clone: Invalid option: "%s"\n' "$1"
		>&2 printf 'Usage: %s\n' "$usage"
		exit 1 ;;

	# Argument not prefixed with a dash
	*) break ;;

esac; shift
done


# Actual program's logic starts here
[ -z "$1" ] && {
	>&2 printf 'Usage: %s\n' "$usage"
	exit 1
}

# Concatenate each option passed to git-clone(1)
opts="$recurse $shallow $branch"

# Input lacks a trailing slash? Assume it's the current GitHub user.
if printf "$1" | grep -vq -e'/'; then
	user=`git config github.user`
	repo=$1
	
	# If we can't derive username from the user's `git.config', abort
	[ ! "$user" ] && {
		>&2 printf 'Usage: %s\n' "$usage"
		exit 2;
	}
	
	src="git@github.com:${user}/${repo}.git"
	printf 'git clone %s %s\n' "$opts" "$src" | sed -e 's/  */ /g'
	git clone $opts "$src"

# Shorthand: `user/repo'
elif printf "$1" | grep -qe'^[^/@]*/[^/@]*$'; then
	user=`printf %s "$1" | cut -d/ -f1`
	repo=`printf %s "$1" | cut -d/ -f2`
	[ "$user" ] && [ "$repo" ] || {
		>&2 printf 'Usage: %s\n' "$usage"
		exit 2;
	}
	git clone $opts "git@github.com:${user}/${repo}.git"

# Assume anything else uses a conventional address format
else git clone $opts "$1"; fi
