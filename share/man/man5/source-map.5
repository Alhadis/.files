'\" t
.ds < \(lq\fI
.ds > \fP\(rq
.ds V2 \fIhttps://docs.google.com/document/d/1xi12LrcqjqIHTtZzrzZKmQ3lbTv9mKrN076UB-j3UZQ/edit?hl=en_US\fP
.if n .ad l
.
.\" Tertiary-level headings
.de H3
.TP
\fB\\$*\fP
.br
..
.
.\" Inter-paragraph vertical spacing
.de SP
.	ie (0.4v<\\n(.V) .sp \\n(.V
.	el               .sp 0.4v
..
.
.\" Bullet points
.de *
.	SP
.	in +5n
\h'-4n'\(bu\h'3n'\\$*
.	in -5n
..
.
.\" Indented code block
.de ``
.	\" End block
.	ie \\n(`` \{\
.		in -6n
.		ft \\n(mE
.		fi
.		hy \\n(HY
.		rr mE
.		rr ``
.	\}
.	\" Start block
.	el \{\
.		nr `` 1
.		SP
.		in +6n
.		nr mE \\n(.f
.		nf
.		nh
.		ft CW
.	\}
..
.
.TH SOURCE-MAP 5 "November 18, 2013" "Google Docs" "Source Map Revision 3 Proposal"
Better bidirectional mapping.
.
.SH DISCUSSION
To discuss or propose changes to this specification, please use the dev-js-sourcemap mailing list:
.UR \fIhttps://lists.mozilla.org/listinfo/dev-js-sourcemap\fP
.UE
.
.SH BACKGROUND
The original source-map format (v1) was created by Joseph Schorr for use by Closure Inspector to enable source-level debugging of optimised JavaScript code (although the format itself is language agnostic).
However, as the size of the projects using the source-maps expanded, the verbosity of the format started to be become a problem.
The v2 was created trading some simplicity and flexibility to reduce to overall size of the source-map.
Even with the changes made with the v2 version of the format, the source-map file size was limiting its usefulness.
The v3 format is based on suggestions made by
.BR podivilov@ .
.ig
.\" Moved to "SEE ALSO" section
.PP
Related documents:
.br
.UR \fI\*(V2\fP
Revision 2 proposal
.UE
..
.
.SH TERMINOLOGY
.TS
lb lb
l  lx .
Term	Definition
_
Generated Code	The code which is generated by the compiler.
\~
Original Source	The source code which has not been passed through the compiler.
\~
Base 64 VLQ	T{
The VLQ is a Base64 value, where the most significant bit (the 6th bit) is used as the continuation bit, and the \(lqdigits\(rq are encoded into the string least significant first, and where the least significant bit of the first digit is used as the sign bit.

Note: The values that can be represent by the VLQ Base64 encoded are limited to 32-bit quantities until some use case for larger values is presented.
T}
\~
Source Mapping URL\|	The URL referencing the location of a source-map from the generated code.
_
.TE
.
.SH REVISION 3 FORMAT
.SS General Goals
.ta 7n
.nf
\(bu	Reduce the overall size to improve parse time, memory consumption, and download time.
\(bu	Support source-level debugging allowing bidirectional mapping.
\(bu	Support server-side stack trace deobfuscation.
.fi
.
.SS Proposed Format
.`` json
.nm 1 1 -8n 5n
\&{
\&    "version" : 3,
\&    "file": "out.js",
\&    "sourceRoot": "",
\&    "sources": ["foo.js", "bar.js"],
\&    "sourcesContent": [null, null],
\&    "names": ["src", "maps", "are", "fun"],
\&    "mappings": "A,AAAB;;ABCDE;"
\&}
.nm 0 0 0 0
.nm
.``
.
.TS
lb lx .
Line 1:	The entire file is a single JSON object.
Line 2:	File version (always the first entry in the object) and must be a positive integer.
Line 3:	An optional name of the generated code that this source-map is associated with.
Line 4:	T{
An optional source root, useful for relocating source files on a server or removing repeated values in the \(lqsources\(rq entry.
This value is prepended to the individual entries in the \*<source\*> field.
T}
Line 5:	A list of original sources used by the \*<mappings\*> entry.
Line 6:	T{
An optional list of source content, useful when the \*<source\*> can\(cqt be hosted.
The contents are listed in the same order as the sources in line 5.
\(lqnull\(rq may be used if some original sources should be retrieved by name.
T}
Line 7:	A list of symbol names used by the \*<mappings\*> entry.
Line 8:	A string with the encoded mapping data.
.TE
.
.PP
.ta 7n
.nf
The \*<mappings\*> data is broken down as follows:
.sp \n(PDu
\(bu	each group representing a line in the generated file is separated by a \(lq;\(rq
\(bu	each segment is separated by a \(lq,\(rq
\(bu	each segment is made up of 1, 4 or 5 variable length fields.
.fi
.
.PP
The fields in each segment are:
.TP
1.
The zero-based starting column of the line in the generated code that the segment represents.
If this is the first field of the first segment, or the first segment following a new generated line (\(lq;\(rq), then this field holds the whole base-64 VLQ. Otherwise, this field contains a base-64 VLQ that is relative to the previous occurrence of this field.
.br
.ul
Note
.cu
that this is different than the fields below because the previous value is reset after every generated line.
.TP
2.
If present, an zero-based index into the \*<sources\*> list.
This field is a base-64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented.
.TP
3.
If present, the zero-based starting line in the original source represented.
This field is a base-64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented.
Always present if there is a source field.
.TP
4.
If present, the zero-based starting column of the line in the source represented.
This field is a base-64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented.
Always present if there is a source field.
.TP
5.
If present, the zero-based index into the \*<names\*> list associated with this segment.
This field is a base-64 VLQ relative to the previous occurrence of this field, unless this is the first occurrence of this field, in which case the whole value is represented.
.
.PP
Note: This encoding reduces the source-map size 50% relative to the V2 format in tests performed using Google Calendar.
.
.
.H3 Resolving Sources
If the sources are not absolute URLs after prepending of the \*<sourceRoot\*>, the sources are resolved relative to the source-map
(like resolving <\h'-1'
.cu
script\ src\h'-1'
> in a HTML document).
.
.H3 Encoding
For simplicity, the character set encoding is always UTF-8.
.
.H3 Compression
The file is allowed to be GZIP compressed.
It is not expected that in-browser consumers of the the source-map will support GZIP compression directly but that they will consume an uncompressed map that may be GZIP\(cqd for transport.
.
.H3 Extensions
Additional fields may be added to the top-level source-map provided the fields begin with the \*<x_\*> naming convention.
It is expected that the extensions would be classified by the organisation providing the extension, such as \*<x_google_linecount\*>.
Field names outside the \*<x_\*> namespace are reserved for future revisions.
It is recommended that fields be namespaced by domain, i\.e\. \fIx_com_google_gwt_linecount\fP.
.
.H3 Known Extensions
\fIx_google_linecount\fP \(em the number of line represented by this source-map.
.
.H3 Notes
Using file offsets were considered but rejected in favour of using line/column data to avoid becoming misaligned with the original due to platform specific line-endings.
.
.H3 Index map: supporting post-processing
To support concatenating generated code and other common post-processing, an alternate representation of a map is supported:
.`` js
.nm 1 1 -15n 13n
\&{
\&   version: 3,
\&   file: "app.js",
\&   sections: [
\&      { offset: { line: 0,   column: 0 }, url: "url_for_part1.map" }
\&      { offset: { line: 100, column: 10 }, map:
\&          {
\&             version : 3,
\&             file: "section.js",
\&             sources: ["foo.js", "bar.js"],
\&             names: ["src", "maps", "are", "fun"],
\&             mappings: "AAAA,E;;ABCDE;"
\&          }
\&      }
\&   ],
\&}
.nm 0 0 0 0
.nm
.``
.
.IP
.nf
The index map follows the form of the standard map:
\fBLine 1:\fP The entire file is an JSON object.
\fBLine 2:\fP The version field. See the description of the standard map.
\fBLine 3:\fP The name field. See the description of the standard map.
\fBLine 4:\fP The sections field.
.fi
.
.IP
The \*<sections\*> field is an array of JSON objects that itself has two fields: \*<offset\*> and a source-map reference.
\*<offset\*> is an object with two fields, \*<line\*> and \*<column\*>, that represent the offset into generated code that the referenced source-map represents.
The other field must be either \*<url\*> or \*<map\*>.
A \*<url\*> entry must be a URL where a source-map can be found for this section and the URL is resolved in the same way as the \*<sources\*> fields in the standard map.
A \*<map\*> entry must be an embedded complete source-map object.
An embedded map does not inherit any values from the containing index map.
.
.IP
The sections must be sorted by starting position and the represented sections may not overlap.
.
.SS Conventions
.H3 Source Map Naming
Optionally, a source-map will have the same name as the generated file but with a \*<.map\*> extension.
For example, for \*<page.js\*> a source-map named \*<page.js.map\*> would be generated.
.
.H3 Linking generated code to source-maps
While the source-map format is intended to be language and platform agnostic, it is useful to have a some conventions for the expected use-case of web server hosted JavaScript.
.IP
There are two suggested ways to link source-maps to the output.
The first requires server support to add a HTTP header and the second requires an annotation in the source.
.IP
The HTTP header should supply the source-map URL reference as:
.`` http
SourceMap: <\fIurl\fP>
.``
.
.IP
Note: previous revisions of this document recommended a header name of \*<X-SourceMap\*>.
This is now deprecated; \*<SourceMap\*> is now expected.
.IP
The generated code may include a line at the end of the source, with the following form:
.`` js
//# sourceMappingURL=<\fIurl\fP>
.``
.
.IP
Note: The prefix for this annotation was initially \*<//@\*> however this conflicts with Internet Explorer\(cqs Conditional Compilation and was changed to \*<//#\*>.
It is reasonable for tools to also accept \*<//@\*> but \*<//#\*> is preferred.
.IP
This recommendation works well for JavaScript, it is expected that other source files will have other conventions:
.`` css
\fBCSS:\fP	/*#\ sourceMappingURL=<\fIurl\fP>\ */
.``
.
.IP
Note: <\fIurl\fP> is a URL as defined in RFC3986; in particular, characters outside the set permitted to appear in URIs must be percent-encoded.
.br
Note: <\fIurl\fP> may be a data URI.
Using a data URI along with \*<sourcesContent\*> allow for a completely self-contained source-map.
.
.IP
Regardless of the method used to retrieve the source-mapping URL the same process is used to resolve it, which is as follows:
When the source-mapping URL is not absolute, then it is relative to the generated code\(cqs \(lqsource origin\(rq.
The source origin is determined by one of the following cases:
.
.* "If the generated source is not associated with a script element that has a \*<src\*> attribute and there exists a \*<//# sourceURL\*> comment in the generated code, that comment should be used to determine the source origin.\
Note: Previously, this was \*<//@ sourceURL\*>, as with \*<//@ sourceMappingURL\*>, it is reasonable to accept both but \*<//#\*> is preferred.
.* "If the generated code is associated with a script element and the script element has a \*<src\*> attribute, the \*<src\*> attribute of the script element will be the source origin.
.* "If the generated code is associated with a script element and the script element does not have a \*<src\*> attribute, then the source origin will be the page\(cqs origin.
.* "If the generated code is being evaluated as a string with the \*<eval()\*> function or via \*<new Function()\*>, then the source origin will be the page\(cqs origin.
.
.H3 Linking eval\(cqd code to named generate code
There is an existing convention that should be supported for the use of source-maps with eval\(cqd code, it has the following form:
.`` js
//@ sourceURL=\fIfoo.js\fP
.``
.
.IP
It is described here:
.UR \fIhttp://blog.getfirebug.com/2009/08/11/give-your-eval-a-name-with-sourceurl/\fP
.UE
.
.H3 Language Neutral Stack Mapping Notes
Stack tracing mapping without knowledge of the source language is not covered by this document.
.
.H3 Multi-level Mapping Notes
It is getting more common to have tools generate source from some DSL (templates) or to compile CoffeeScript \(-> JavaScript \(-> minified JavaScript, resulting in multiple translations before the final source-map is created.
This problem can be handled in one of two ways.
The easy but lossy way is to ignore the intermediate steps in the process for the purposes of debugging,
the source location information from the translation is either ignored (the intermediate translation is considered the \(lqOriginal Source\(rq) or the source location information is carried through (the intermediate translation hidden).
The more complete way is to support multiple levels of mapping: if the Original Source also has a source-map reference, the user is given the choice of using the that as well.
.
.IP
However, it is unclear what a \(lqsource-map reference\(rq looks like in anything other than JavaScript.
More specifically, what a source-map reference looks like in a language that doesn\(cqt support JavaScript style single line comments.
An HTTP header would address this, but is not yet agreed upon.
.
.H3 JSON over HTTP Transport
XSSI attacks could potentially make source-maps available to attackers by doing a direct script src to a source-map after overriding the \fIArray\fP constructor.
This can be effectively prevented by preprending a JavaScript syntax error to the start of the response.
Thus when delivering source-maps over HTTP, servers may prepend a line starting with the string \*<)]}'\*> to the source-map.
If the response starts with this string, clients must ignore the first line.
.
.
.SH SEE ALSO
.na
Source of this document at
.UR \fIhttps://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\fP
Google Docs
.UE .
.
.PP
.UR \*(V2
Revision 2 proposal
.UE .
.
.PP
.UR \fIhttps://www.mattzeunert.com/2016/02/14/how-do-source-maps-work.html\fP
\(lqHow do source maps work?\(rq
.UE .
.
.SH LICENSE
This work is licensed under a
.UR \fIhttp://creativecommons.org/licenses/by-sa/3.0/\fP
Creative Commons Attribution-ShareAlike 3.0 Unported License
.UE .
.
.SH AUTHORS
.nf
John Lenz, Google
Nick Fitzgerald, Mozilla
February 11, 2011
.fi
.
.PP
Man page adaptation by
.MT \fIgardnerjohng@gmail.com\fP
Alhadis
.ME
on 25 December 2019.
.
.
.SH HISTORY
.nh
.ad l
.\" All document revisions listed below are by John Lenz; column omitted for brevity.
.TS
lb l .
2011-04-12:	Initial Revision
2011-04-15:	Updates to reflect prototype
2011-07-20:	Removed \*<lineCount\*> field, removed \*<Combined Map\*> section
2011-08-18:	Draft
2012-05-02:	HTTP header and CC-BY-SA license
2012-07-30:	Modified recommended HTTP header name.
2012-08-20:	Add CSS linkage recommendation
2012-10-24:	Add clarifying section on source locations.
2013-02-19:	T{
Add \*<sourcesContent\*> line to support self-contained source-maps.
Added note regarding using data URI to load source-maps.
T}
2013-05-16:	T{
Updated linking convention to use \*<#\*> instead of \*<@\*>.
.br
\*<@\*> conflicts with Internet Explorer\(cqs conditional code.
T}
2013-11-18:	T{
Noted that \*<file\*> is an optional field.
Minor typographical corrections.
T}
.TE
